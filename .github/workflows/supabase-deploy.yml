name: Deploy to Supabase

on:
  push:
    branches:
      - main  # or change to master, depending on your default branch
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Check database schema
        id: db_check
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          DATABASE_PROVIDER: supabase
        run: |
          # Run the setup_supabase_schema.py script to check if schema exists
          # It will print message if table exists or create it otherwise
          python setup_supabase_schema.py
          
      - name: Mark migrations as applied if schema exists
        if: success()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          DATABASE_PROVIDER: supabase
        run: |
          if [ -d "migrations" ] && [ -f "migrations/alembic.ini" ]; then
            # Create a stamp in alembic_version table to mark schema as up-to-date
            # This will only stamp the database if migrations haven't been applied yet
            alembic -c migrations/alembic.ini stamp head || true
          fi
      
      - name: Run future migrations
        if: success()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          DATABASE_PROVIDER: supabase
          DATABASE_URL: ${{ secrets.DATABASE_URL || '' }}
        run: |
          if [ -d "migrations" ] && [ -f "migrations/alembic.ini" ]; then
            # Only run upgrade for future migrations
            alembic -c migrations/alembic.ini upgrade head || echo "No new migrations to apply"
          fi
          
      - name: Check for deployment success
        if: ${{ success() }}
        run: |
          echo "✅ Deployment to Supabase successful!"
          
      - name: Handle deployment failure
        if: ${{ failure() }}
        run: |
          echo "❌ Deployment to Supabase failed!"
          # You could add notification steps here